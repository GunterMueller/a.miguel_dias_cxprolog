20/Dec/2006: version 0.94
   -semantic changes:
      * 
   -additions:
      * Introduced the predicates current_atom/1, jobjs/0, wxobjs/0.
    -improvements:
      *  The general functionality of the "extra types" (dicts, stacks,
         queues, streams, java objects, wxwidgets objects, etc.) got richer.
         Now there are two new universal features, previously only available
         for atoms and floats:  (1) garbage collection; (2) hash tables for
         fast access of "extra values".
      *  The implementations of each existing "extra type" had to be
         adjusted to conform to the new rules for "extra types". For
         example, now each extra type must be aware that its values
         are subjected to the influence of a garbage collector.
      *  The atoms and floats was reimplemented as "extra types", benefiting
         from the new generic functionality of "extra types".
      *  Introduced a new tag scheme that uses only the lower 2 bits, and
         in some cases the lower 3 bits, of the machine addresses. The new tag
         scheme takes advantage of the fact that atoms and floats are now
         internally represented as "extra types": more commonality
         implies that less bits are needed for tags. The new tag scheme is
         important because it removes some complications that always existed
         when running CxProlog on top of certain hardware/OS combinations
         (the concept of "backwards machine" is not need anymore.)
      *  The memory manager of CxProlog had to be partially reimplemented
         to serve the needs of the new tag system. 
      *  The memory manager now offers the option of each allocated block
         not having to keep track of their own size. This saves some memory.
      *  Some graphical predicates are now available to create and manage
         graphical elements such as: text windows, drawing windows, alert boxes,
         file chooser dialogs, etc. All this was implemented taking advantage of
         the CxProlog interface to Java and wxWidgets.
         The graphical predicates are yet to be documented and their
         implementation is still "alpha quality". You can have an idea about
         what is available by peeking inside the files "JavaAddOns.c" e
         "WxWidgetsAddOns.cpp" of the distribution of CxProlog. This is an
         optional component of CxProlog that can be activated in "Makefile".
         (The implementation of these predicates is a recent and valuable
         contribuition of Sergio Lopes and Henrique Oliveira, two graduated
         students in our Department).
  -bug fixes:
      * 

23/Jul/2006: version 0.93 (revision 1)
   -semantic changes:
      * The predicate property 'builtin' (supported by predicate_property/2)
        was renamed 'built_in' for compatibility with other Prologs.
   -additions:
      * Introduced the ISO predicates: current_prolog_flag/2, set_prolog_flag/2.
      * Introduced the ISO Prolog flag 'unknown' which determines how calls
        to undefined predicates are handled. Possible values are 'error',
        'fail', warning'.
    -improvements:
      * None.
  -bug fixes:
      * Predicates close/1 and close/2 were not working properly on the Mac
        when applied to input streams.

31/May/2006: version 0.93
   -semantic changes:
      * Now the arguments of predicate open/4 adhere to the ISO standard.
        Also the arguments of open_buffer_stream/4 were made consistent
        with the arguments of open/4.
   -additions:
      * New predicate close/2, follows the ISO standard.
      * Introduced support to the wxWidgets platform independent API.
        This new component of CxProlog can be optionally activated in the
        "Makefile" file. When this component is active, the CxProlog core runs
        in one thread and the wxWidgets graphical user interface runs in
        a different thread. The services of wxWidgets can be accessed
        from the CxProlog side by defining new built-in predicates written
        in C++. All the synchronization and inter-thread communication issues
        are already solved in an easy-to-use framework. See one example of
        use of this framework in the file "WXWidgetsDemo.cpp".
      * Introduced support for GUI interfaces based on Java.
      * Introduced three new predicates to manage high-level events coming
        from the GUI interface. It is supported getting events from Java and
        wxWidgets in the same program. The predicates are:
              gui_event_get/1,
              gui_event_is_available/0,
              gui_event_discard_all/0.   [** NOT IN THE MANUAL YET **]
    -improvements:
      * Part of the code was reorganized and generalized to ease the future
        exploration of alternative semantics for the contexts.
      * CxProlog can now be safely activated as a thread inside a
        multi-threaded program. 
      * Improved 'sys_trace' = 3. Now it also shows the predicate calls
        in the middle of the abstract machine instructions.
      * Improved the predicate abolish_builtin/3 to allow code compiled
        before the deletion of a built-in predicate to still access
        the original predicate definition.
  -bug fixes:
      * At startup, now CxProlog handles gracefully any invalid setup of
        the environment variable LC_CTYPE by using the fallback 'C' locale.
      * The interrupt key now works when the Java component is installed.
      * Fixed a subtle bug in the management of the references to Java objects.

06/Nov/2005: version 0.92 (revision 1)
   -semantic changes:
      * The default value of the flags 'undef_warnings' and
        'memory_warnings' changed to 'off' because the corresponding
        behaviour is less confusing to the new users.
   -additions:
      * New flag 'old_consult', if 'on', forces the consulting predicates
        to be compatible with C-Prolog and also retro-compatible
        with older versions of CxProlog. When 'old_consult' is 'on',
        consult/1 appends clauses to the database and reconsult/1 tries
        to redefine predicates. More details in the MANUAL.
    -improvements:
      * Improved the predicate rename_builtin/3 to allow code compiled
        before the renaming of a built-in predicate to still access
        the original predicate definition.
      * Removed the upper limit to the number of distinct named variables
        occurring in a asserted clause. The limit was 64. This is
       iuseful because clauses automatically generated by some 
        program transformers may contain a very large number of
        distinct named variables.
  -bug fixes:
      * When invoked from a command, during consult, assert/1 was
        causing the unwanted deletion of the predicate refered to by
        its argument. Fixed. 

25/Sep/2005: version 0.92
   -semantic changes:
      * Following the ISO standard, now CxProlog distinguishes
        between static predicates and dynamic predicates with
        coherent update semantics. A dynamic predicate is directly
        declared using dynamic/1 and is indirectly declared through
        the assert predicates. The static predicates are created
        by consult/1.
      * CxProlog abandoned the old C-Prolog model of consulting
        (incompatible with static predicates) and adopted the
        "modern model" of most modern Prologs: the predicates reconsult/1
        and silent_reconsult/1 were dropped and much of their behavior
        was transfered to renewed and improved predicates consult/1 and
        silent_consult/1.
      * current_predicate/1 was changed to comply with the ISO standard.
        Now the argument is a predicate indicator (a term of the
        form Name/Arity), not anymore a term whose main functor
        identifies the predicate (note there is a new predicate
        current_predicate/2 very similar to the old current_predicate/1
        - see below).
      * The term reader changed the way it handles ambiguities involving
        operators with multiple definitions: the prefix alternative is
        tried first, next the infix alternative, finally the postfix
        alternative . Previously the alternative tried first was the infix
        alternative. Using the new rule, the term "not - a" is now read as
        "not(-(a))" instead of "-(not,a)", and  the term "a(- - -,- -)" is
        now read as "a(-(-(-)),-(-))" instead of "a(-(-,-),-(-))". The new
        rule is maybe more natural and reflects the way many Prologs handle
        operator ambiguities.
      * Now distinct internalized Java objects denote distinct extern
        Java objects. The predicate java_same/2 was deleted and now
        the identity between two Java objects is checked using ==/2 or =/2.
   -additions:
      * New predicates dynamic/1 and dynamic_iu/1 declare dynamic
        predicates with coherent update semantics: dynamic/1 selects
        the "logical update semantic view" and dynamic_iu/1 selects
        the "immediate update semantic view".
      * New flag 'all_dynamic', if 'on', forces all local predicates
        to be dynamic.
      * New ISO predicate multifile/1 declares predicates that may
        be defined over multiple files.
      * New predicates visible/1 and import/2 declare visible predicates
        and imported predicates, respectively.
      * New quasi-standard predicate predicate_property/2 explore the
        predicates in the database and their properties.
        The supported properties are:
                    'builtin', 'user_defined', 'local',
                    'static', 'dynamic', 'dynamic_iu',
                    'imported_from(U)', 'visible', 'private',
                    'multifile', 'source, file(F),
                    'number_of_clauses(N)', 'full_name'(T),
                    'undefined'.
      * New quasi-standard predicate current_predicate/2 provides another
        useful method of accessing the user-defined predicates of the
        current unit.
      * New quasi-standard predicate absolute_file_name/2 generates
        canonized absolute pathnames. It is used in consult/1 to uniquely
        identify source files.
      * New predicates error/1 and warning/1 allow issuing errors and
        messages using the CxProlog format.
      * New arithmetic function currtime/0 gives the absolute time in
        seconds since 00:00:00 UTC, January 1, 1970.
      * New arithmetic functions random/0, random/1 and e/0.
   -improvements:
      * Predicates clause/2 and retract/1 were updated to be consistent
        with the two semantic views of dynamic predicates.
      * The debugger was updated so to support the two semantic views
        of dynamic predicates.
      * Parts of the code was rewritten to cope with the newfound
        fussiness of gcc 4.0.
      * Now the implementation of the fs_*/N filesystem predicates is
        compatible with Microsoft Visual Studio in Windows.
      * Some built-in predicates previously written in C,
        e.g. check_imports/0 and check_missing/0, were rewritten in
        Prolog, taking advantage of the new predicates predicate_property/2,
        error/1, and warning/1.
      * The cpp preprocessor is now used in a sophisticated way to simplify
        the management of the abstract machine instructions.
      * All the arithmetic functions, e.g. sin/1 and exp/1, are now
        implemented using the maximum available numeric precision
        (usually 80-bit).
  -bug fixes:
      * Now the term writer places parenthesis around some operators
        when this is needed to ensure the written term can be read back.
        Example: the term with structure "-(not,a)" is written as
        "(not)-a" because "not-a" would be read as "not(-(a))".
      * A unit clause, such as 'f(5)', that previously could only be
        retracted using retract(f(5)), can now be also retracted using
        retract((f(5):-true)) or retract((f(5):-X)).

27/Jul/2005: version 0.91
  -semantic changes:
      * Non-standard predicate call/2 was replaced by the quasi-standard
        family of call/n predicates. More on this below.
      * Non-standard predicate unique/1 was replaced by the quasi-standard
        new predicates gensym/2 and gensym/1.
      * Predicates flush/0 and flush/1 were renamed flush_output/0 and
        flush_output/1 following the ISO standard.
  -additions:
      * Introduced the ISO datatype 'character': an ISO-Prolog character is
        simply a one-char atom, e.g. 'a', '$', ' '.
      * Introduced the ISO predicate char_code/2 which converts between
        ISO characters and Unicode codes.
      * The new predicates char_reorder/0, char_reorder/1 and char_reorder/2
        control the order of characters, in this way influencing the order of
        atoms and terms defined by @</2, @=</2, etc. The behaviour of
        compare/3, sort/2, etc. also change accordingly.
      * Introduced the ISO predicates atom_chars/2 and number_chars/2
        which are similar to the existing atom_codes/2 and number_codes/2
        except they accept and return lists of characters.
      * Introduced several new ISO predicates that operate over streams:
              at_end_of_stream/0, at_end_of_stream/1,
              get_char/1, get_char/2, get_code/1, get_code/2,
              peek_char/1, peek_char/2, peek_code/1, peek_code/2,
              put_char/1, put_char/2, put_code/1, put_code/2,
              get_byte/1, get_byte/2, peek_byte/1, peek_byte/2,
              put_byte/1, put_byte/2.
      * New experimental predicates to verify the lexical class of
        characters or Unicode codes. As now, they only work properly within the
        latin-1 subrange (outside this range, everything is a low case letter).
              char_isalnum/1, char_isalpha/1, char_islower/1,
              char_isupper/1, char_isdigit/1, char_isspace/1,
              char_issymbol/1, char_isprint/1, char_ispunct/1.
      * New predicate get_single_char/1 reads one char from 'user_input'
        without waiting for the return key.
      * New quasi-standard predicates check the type of terms:
              compound/1, callable/1, is_list/1, ground/1.
      * New predicate forall/2 checks whether a goal G2 can be proved for
        all the alternative bindings of a goal G1. Defined as
              forall(G1, G2) :- \+ (G1, \+ G2).
      * New quasi-standard predicate compare/3 checks the order between
        two terms.
      * New meta-call predicates support flexible and efficient ways to
        invoke predicates (specially useful in higher-order predicates):
              apply/2, call/2, call/3, call/4, call/5, call/6.
      * New flag 'info_messages'. If 'off', all the info messages not
        controled by other flags are suppressed, including the startup
        message and the messages issued by consult/1.
      * New command line switch "-quiet" can be used to turn off, at startup,
        the flags 'memory_warnings' and 'info_messages'.
  -improvements: 
      * Predicates listing/0 and listing/1 were updates to consider
        all the new properties of the predicates in the database.
      * Improved compatibility with djgpp-gcc on Windows. Now the file system
        predicates, that is the predicates of the family fs_*/N, work on
        Windows if compiled with djgpp-gcc.
      * Fixed two compatibility problems with compilers that are not fully
        compliant with the ISOC99 standard. Now CxProlog relies less on
        the ISOC99 standard. The problems where: handling the 'inf' and 'nan'
        real constants; missing function 'vsnprintf'.
-bug fixes:
      * The order between terms in CxProlog didn't followed the ISO
        standard. Fixed.

11/Abr/2005: version 0.90 (revision 5)
  -semantic changes:
      * None.
  -improvements: 
      * The Scratch Pad is a automatically growing block of memory that is
        used and reused inside CxProlog. For example, it is used as a code
        buffer by the compiler, as token buffer by the term reader, as an
        auxiliary  stack by several internal procedures such as the unification
        procedure, etc. Now, the Scratch Pad has been made a reentrant
        structure by introducing segmentation, the various segments being
        managed under a stack discipline. This will make the Scratch Pad
        even more useful and safer to use in the long run.
  -bug fixes:
      * The three versions of the sort predicate was generating garbled results,
        in some circumstances, because of an erroneous use of the Scratch Pad.
        Even if there were quicker fixes for the problem, we decided to
        reimplement the Scratch Pad as a bull blown reentrant structure.

12/Mar/2005: version 0.90 (revision 4)
  -semantic changes:
      * None.
  -additions:
      * Predicate fs_property/3 has been extended to support the new file
        property 'time'. The returned term is a list containing two
        integers representing the time of the last access and the time
        of the last modification.
      * The three block oriented predicates - get_block/2, get_block/3
        and put_block/2 - now work over any kind of stream, not only
        over binary file streams.
      * The variante 'type' of the pedicate fs_property/3 now has
        three possible results: 'file', 'dir' and 'other'. This last
        value is new and is returned if the file is not a regular
        file neither a directory.
      * Created a new Prolog type for representing wxWidgets external objects.
  -improvements: 
      * Now, CxProlog seems to be compatible with Mac X when
        compiled using gcc (thanks Joaquim Baptista and Paulo Moura
        for the patches).
  -bug fixes:
      * We had to disable the "memory grow warnings" during
        string (gstr) expansions.

13/Feb/2005: version 0.90 (revision 3)
  -semantic changes:
      * None.
  -additions:
      * The Makefile now allows CxProlog to be compiled as a shared library.
        (Use 'make lib' to create the library 'libcxprolog.so', and
         'make shared' to create the testing application 'cxprolog_shared'.)
  -bug fixes:
      * atom_term/2 was generating error messages instead of failing
        silently. Bug introduced in cx89, when the #HERE# feature was added.
        Fixed.

09/Feb/2005: version 0.90 (revision 2)
  -semantic changes:
      * None.
  -additions:
      * New predicate locale/1 shows the default locale.
  -improvements: 
      * Improved the low level debugging facilities associated with the
        flag sys_trace.
  -bug fixes:
      * CxProlog crashed if the locale environment was invalid.
        Fixed. Now it issues an error message and exits gracefully.
      * Couldn't create an isolated free var in the "code area". This
        bug only showed up on "backwards machines". Fixed.

03/Feb/2005: version 0.90 (revision 1)
  -semantic changes:
      * None.
  -bug fixes:
      * There was a subtle bug concerning the ordering of updates
        when the stacks were expanded and relocated. This bug only
        showed up on "backwards machines". Fixed.
      * By mistake, the predicate dict/1 was renamed 'DICT'/1 on version
        cx90. Fixed this silly bug.
      * Fixing the comparison of real numbers in cx90 caused another bug.
        By mistake the implementation of =\=/2 became identical to the
        implementation of =:=/2. Fixed this silly bug.

05/Jan/2005: version 0.90
  -semantic changes:
      * The default value of the 'interrupt' flag changed to 4 as the
        corresponding behaviour is less surprising to the user.
      * Now the precedence in op/3 can be "0", so to cancel one of the
        active interpretations (prefix, infix or postfix) of
        an operator. This follows the ISO standard (and is useful).
      * The precedence/associativity of the following operators
        changed to be ISO compliant: mod \+ = \ **
      * Predicate slice/4 is now more flexible as positive
        and negative offsets can be combined in the same
        invocation. It is also more sane when dealing with offsets
        outside the atom limits.
      * The following predicates now accept Unicode char codes:
        name/2, atom_codes/2, get0/1, get0/2, get/1, get/2,
        peek0/1, peek0/2, peek/1, peek/2, skip/1, skip/2,
        put/1, put/2.
      * Dropped the concept of "current output error stream" and
        the associated predicates current_output_error/1 and
        set_output_error/1.
  -additions:
      * Now, Prolog code can invoke Java code. This is an optional
        component of CxProlog, so it is not installed by default.
        There are five Java predicates available:
              java_call/4, java_field/4, java_array/4,
              java_convert/3, java_same/2.
        Read the new section "External Interface with Java" in the MANUAL.
      * New flag 'extra_spaces_in_terms' forces all terms to be written with
        one extra space inserted after each comma separator and after a
        bar separator appearing inside a list.
  -improvements: 
      * Now CxProlog supports the ISO 10646 Unicode character set (minus
        composing characters). Internally, the compact UTF-8 encoding
        is used, but this is transparent and the programmer simply
        has to deal with 31-bit character codes on 64-bit machines or
        28-bit character codes on 32-bit machines. CxProlog seems to be
        the first open-source implementation of Prolog supporting the
        Unicode character set.
      * For the most part, the OS only understands text data in the
        default char encoding. All the necessary conversions, to and
        from the fixed internal UTF-8 encoding, are performed
        automatically and transparently. This applies to filenames,
        OS environment variable names, OS environment variable contents
        and command line arguments.
      * The built-in debugger was fully revised. Now it is more
        mature and its behaviour improved in many details.
        Also, any unhandled exception now prints a stack-trace,
        if debugging is on.
      * For the first time, CxProlog is compatible with the Windows OS
        where it can be compiled using djgpp-gcc or MS Visual Studio.
      * The memory manager now tries to obtain memory from
        the operating system using the low level 'mmap' primitive.
        The primitive 'malloc' proved not to be reliable enough to
        allow fine tuning the memory usage and to allow having complete
        control over "backwards systems".
        'malloc' is still used in systems where 'mmap' is not available.
      * writeq((a,b)) now writes "a, b" instead of "a',' b". The new form
        is simpler and still can be read back by the reader.
  -bug fixes:
      * Transferring data between two buffers via a binary stream
        previously opened over one of them didn't work. Fixed.
      * The trail was allocated as a permanent block and then released as
        a temporary block. This bug was introduced in cx89. Fixed.
      * Surprisingly, some goals such as (1.5+1) =:= 2.5 were failing. We
        were wrongly assuming there was an unique representation for each
        float number. Fixed.
      * The "*BADTERM*" feature in the term writer gave rise to a bug.
        This bug was introduced in cx89. Fixed.
      * The debugger didn't know how to handle the non-deterministic
        predicates written in C. Fixed.
      * The debugger didn't know how to handle exceptions. Fixed.

22/Dez/2004: version 0.90 alpha 3
29/Nov/2004: version 0.90 alpha 2
08/Nov/2004: version 0.90 alpha 1

25/Jul/2004: version 0.89
  -semantic changes:
      * None.
  -additions:
      * New predicate open_buffer_stream/4, complements the existing predicate
        open_buffer_stream/3. Allows any character encoding, e.g.
        'sr_YU.iso88595@cyrillic' to be selected when opening a stream over
        a buffer. It also allows opening a stream over a buffer in binary mode
        (using the conventional encoding 'binary').
      * Now each file stream memorizes its full pathname, which can be obtained
        using current_stream/4.
      * New flag 'force_quoted', forces write/1, write/2, writeln/1, writeln/2
        and atom_term/2 to behave in "quoted" mode. Might be useful for
        debugging.
      * Added the concept of "current output error stream" and now all the
        warnings and errors are automatically issued through this implicit
        stream. There are two new related predicates: current_output_error/1 and
        set_output_error/1. The first obtains the implicit stream and the
        second changes it (this allows redirecting all error messages to
        a log file, for example). [WARNING: dropped in cx90.]
      * New predicate consulting/1, obtains the stream being consulted or
        reconsulted. May succeed only if used in directives :-/1 or ?-/1
        that show up in the stream itself.
      * New predicate read_with_source/3, similar to read/2 except that it
        returns an atom with the exact source text that gave rise to the term,
        spaces, newlines and comments included.
      * New predicate get_block/2, complements the existing predicate
        get_block/3. The new predicate loads a buffer with the entire contents
        of a binary stream.
      * Introduced the new source file "Version.c", which supplies facilities
        for manipulating the CxProlog application identification: name, version,
        subversion and revision. The new predicate version/1 accesses the
        identification of the running application.
  -improvements:
      * When reporting an error, now the term reader inserts the token #HERE#,
        indicating the exact place where the syntactic error occurred.
      * When displaying technical information, now CxProlog writes all the
        terms in "quoted mode" (even if the flag 'force_quoted' is 'off').
        This applies to: error messages and warnings; information displayed
        by the built-in debugger; information displayed by the "showing
        predicates" (ivars/0, arrays/0, dicts/0, etc.); listings generated
        by the predicates code/1 and listing/0; etc.
      * Now the term writer goes to some lengths in dealing with malformed
        terms. The token "*BADTERM*" indicates the exact point of damage, inside
        the written term. This is the normal behaviour now: no flag needs to be
        set. This might be helpful for detecting bugs earlier.
      * Ids of values of "extra types", e.g. 1'STREAM_4005e2e0,
        are now allowed to occur in asserted clauses.
      * New hash function for atoms considers only the first 16 bytes of its
        text, not the entire text anymore. This saves time when computing the
        hash value of very long atoms.
      * Now open/3, see/1, etc. accept very long filenames: now there is no
        maximum length; previously the limit was 256.
      * Introduced support for "backwards systems", systems that use memory
        addresses with the high-bit on. The Makefile file contains a new
        configuration step that analyzes the system and handles automatically
        and transparently the problem.
  -bug fixes:
      * with_ivar/3 didn't work with undefined ivars. Fixed.
      * get_line/1 was at odds with the empty lines. Fixed.
      * Removed incompatibility between the garbage collection of atoms and the
        backtrackable assignment '&:=' for ivars.
      * Fixed a bad bug in the exception handling mechanism.
      * Fixed bug in array_set/3.

16/Abr/2004: version 0.88-5
  -semantic changes:
      * Now the ISO predicates open/3 and open/4 always open streams afresh.
        This is the ISO standard that shields the programs from filename
        ambiguities and working directory changes.
      * Now the Edinburg-style predicates see/1 and tell/1 only consider as
        candidates for reusing, currently opened streams originally opened
        by see/1 or tell/1 (not by open/3 or open/4). This is a very minor change.
      * Now the Edinburg-style predicates see/1 and tell/1 also accept opened
        streams as arguments, making them current. This should not break any
        existing program.
      * Now the Edinburg-style predicates seeing/1 and telling/1 return streams
        instead of filenames, for better coexistence with the ISO predicates.
        This should not break most existing programs, but may break some.
  -additions:
      * 
  -improvements:
      * Now the term reader can interpret operators as simple atoms in some
        contexts. For instance, now the reader is able to interpret
        "a(- - -,- -)" as "a(-(-,-),-(-))", instead of rejecting the term. This
        is possible because the reader started using two tokens of lookahead in
        some places. (In case the interpretation of the previous term seems
        inconsistent, note that the infix reading of an operator always takes
        precedence).
  -bug fixes:
      * ISO predicates open/3 and open/4 were not behaving like the standard.
        They should open streams afresh, but instead they reusing already opened
        same-named streams, like see/1 and tell/1 do. Fixed.
      * Now, the term writer inserts one space between consecutive atoms if
        they are made of non-alphanumeric chars, so that some terms could be
        read back. For example, write($ - $) now produces "$ - $"; previously
        it produced "$-$" which is read back as an atom.
      * In some contexts, the term writer needs to place parenthesis around
        negative integer literals, so that the term where they occur could be
        read back. For example, write(>(-3)) now produces ">(-3)"; previously
        it produced ">-3" which could not be read back. (Note that "> -3" is
        interpreted as "-(<,3)".)
      * writeq/1 now deals correctly with ','. For example, writeq(a(',')) now
        produces "a(',')" instead of "a(,)" which could not be read back.
      * Now the syntax of real numbers is immune to the current locale
        configuration.

27/Fev/2004: version 0.88
  -semantic changes:
      * NONE.
  -additions:
      * New command rename_builtin/3 allows any predefined built-in predicate
        to be renamed in an alternative boot file. For example, the command
        ":-rename_builtin(get,1,stream_get)" renames the predicate get/1 as
        stream_get/1: note that this frees the name "get", making it available
        to more important uses.     
      * New predicates atom_codes/2, number_codes/2, are ISO inspired
        replacements for the ambiguous predicate name/2.
        [Note: you can "fix" the semantics of name/2, redefining it in a
         non-standard way, by issuing the command
                    ":-rename_builtin(atom_codes,2,name)."]
      * New predicates op_flag/3, op_flag/4 allows changing and testing
        internal flags associated with each operator. As now, the only
        supported operator flag is the "parenthesised" flag, explained next.
      * New operator flag 'parenthesised' controls how the operator is
        processed by the term reader. If a "parenthesised operator" occurs
        as principal functor of a term surrounded by parenthesis, as in
        "(TERM)", then the resulting term will have the form "'$PAR'(TERM)".
        (This feature allows programs to deal with some concrete syntax issues).
      * Two new ivar predicates: &:=/2 and with_ivar/3. The first implements a
        backtrackable assignment operation. The second proves a goal with
        respect to some ivar, temporarily set to some value.
      * New stream predicate current_stream/3, provides read-only access to the
        internal stream table.
  -improvements:
      * Now the term writer always insert one space between two consecutive
        operators, ensuring they don't touch. Probably, now every term written 
        using writeq/1 can be read back with read/1.
      * The term reader is now slightly more discerning. When trying to deal
        with two adjacent ambiguous operators placed in the middle of a complex
        term, the priorities are now taken in account: and the first operator
        is taken as infix whenever possibly; otherwise it is taken as postfix.
  -bug fixes:
      * Two bugs fixed in the term reader, both related with the handling of
        operators.
      * Fixed an elusive bug in the relocation algorithm. Now, the register ZT
        is relocated before the register H, as it should always been.
      * Fixed the internal definition of printable character. The predicates
        buffer_write/1/2 rely on that definition, and they were not
        working properly.
      * Predicates get_line/1/2 were generating and extra empty line at the end
        of file, improperly delaying the report of the end of file situation.

30/Set/2003: version 0.87
  -semantic changes:
      * NONE.
  -additions:
      * New arithmetic function round/1, round numbers to the nearest
        integer, away from zero.
      * Predicate fs_property/3 was extended to support a new file
        property: 'size'.
      * Imperative buffers introduced. A buffer is an array of bytes. The
        buffer predicates are:
           buffer/1, buffer_new/1, buffer_clear/1, buffer_delete/1,
           buffer_size/3, buffer_set/3, buffer_get/3, buffer_write/1,
           buffer_write/2, current_buffer/1, buffers/0.
      * The new predicate open_buffer_stream/3 allows a stream to be opened
        over a buffer. All the existing input and output operations are
        compatible with buffer streams.
      * Introduced two new block processing predicates for binary file streams:
           get_block/3, set_block/2.
  -improvements:
      * Arithmetic functions floor/1 and ceil/1 now implemented using
        80-bit precision (they supported only 64-bit precision before).
  -bug fixes:
      * Arithmetic functions floor/1 and ceil/1 was producing incorrect
        results when applied to numbers outside the range min_int .. max_int.
        This bug was as old as CxProlog itself. Fixed.
      * atom_term/2, writeq/1 and writeq/2 has broken in the previous version
        due to the introduction of support for multiple encodings. Fixed.
      * Certain type errors, such as name(X,[A|B]), was generating a fatal
        internal error. Fixed.
      * Predicate array_delete_item/2 was not really deleting the item and could
        led to an inconsistent state in case of a structured item. Fixed.
      * name/2 didn't know how to deal with numbers. Fixed.
      * By mistake, support for binary streams has been deactivated in the
        previous version (sorry...). Fixed.

04/Set/2003: version 0.86
  -semantic changes:
      * NONE
  -additions:
      * New debugger tool: a low-level runtime tracer which is controlled via
        a new flag 'sys_trace'. This new flag sets the level of detail to be
        produced by the new low-level runtime tracer. 0 means "off", 3 means
        "maximum detail".
      * New predicate open_null_stream/1 creates an output stream that throws
        away characters and terms written to it.
      * Predicates print/1 and print/2 are now fully supported: their default
        behaviour can be changed by providing clauses for the user predicate
        portray/1. (The implementation of this depended on the new generalized
        framework for streams and on the "C calling Prolog" facility.)
      * Introduced an exception handling mechanism, similar to the one available
        in Java, for example. CxProlog support the ISO-Prolog predicates
        catch/3 and throw/1, and also the Quintus-Prolog counterparts:
        on_exception/3 and raise_exception/1. Furthermore CxProlog implements
        a new predicate catch/4, similar to catch/3 except that it produces a
        stack trace of the current execution environment. (The implementation of
        exceptions interfered with the abstract machine, the relocation
        procedure, the finalizers, the debugger and the call-prolog mechanism.)
      * Now any Linux supported character encoding can be associated to a
        file stream. The third parameter of open/4 allows this to be specified.
        When no encoding is specified it is used the default encoding defined
        in the current locale Linux environment.
        LIMITATION: As yet CxProlog knows only how to handle characters with
        Unicode code less or equal 255: all the other characters are implicitly
        converted to the conventional character '?' 
  -improvements:
      * Introduced new generalized framework for streams. Preparing new ground
        to the introduction of Unicode streams, streams over buffers and string,
        etc.
      * Term reader and term writer adapted to take advantage of the new
        streams over strings and over buffers.
  -bug fixes:
      * NONE

26/Jun/2003: version 0.85
  -semantic changes:
      * Now, the end-of-file code for text files can be changed and its default
        value is -1 (as in Quintus Prolog). Previously, the end-of-file code
        could not be changed and its value was 26 (as in C_Prolog). See new
        flag 'eof_code' in the MANUAL.
  -additions:
      * Introduced the command line switch "-script". This allows Prolog to
        be used as a scripting language on Unix. More details in the
        MANUAL. The MANUAL includes one example.
      * Introduced interoperability between C code and Prolog code. The
        reentrant function "Bool CallProlog(Pt goal)" provides the C-built-in
        predicates with the new ability of invoking Prolog code.
      * Support for binary files was introduced. The predicate open/3 gained
        an extra optional parameter, with two possible values: 'text', 'binary'.
        Predicates get0/1, get0/2, peek0/1, peek0/2, put/1, put/2 were
        upgraded to handle binary files. The end-of-file code for binary
        files is -1, and this cannot be changed.    
      * The new flag 'eof_code' specifies the end-of-file code for text files.
        Its default value is -1 as in Quintus Prolog. Set it to 26 if you want
        to achieve compatibility with C-Prolog.
  -improvements:
      * Now, the CallVar and ExecuteVar instructions do not waste time
        dereferencing the X arguments.
  -bug fixes:
      * The abstract machine support for the "meta cut" (cut occurring inside
        the meta-predicates ;/2, ->/2, , not/1, call/1, etc.), was not taking
        into account the relocation procedure and also the finalizers. Fixed.
      * The relocation procedure was not taking into account the debug
        instructions that are stored in the debug frames. Fixed.
      * The compiler now treats UnifyYLocalValue as a non-globalizing
        instruction, to ensure that all the invariants of the WAM are satisfied.

20/Apr/2003: version 0.84
  -semantic changes:
      * Added special support for cuts (!/0) occurring in the
        context of the historic context predicates >/1 and </1.
      * File README was renamed MANUAL.
  -additions:
      * New predicate 'flushall/0' flushes all the currently open
        output streams.
      * Imperative arrays introduced. The array predicates are:
           array/1, array_new/1, array_clear/1, array_delete/1, array_set/3, 
           array_get/3, array_delete_item/2, array_as_list/2, array_write/1,
           array_write/2, current_array/1, arrays/0.
  -improvements:
      * The stress-testing modes, which are activated using flags
        'test_relocation' and 'test_garbage_collection' are now more
        exhaustive. This allowed a subtle bug in predicate varnames/1 to be
        discovered.
      * Changed the method of internally accessing units, operators
        and ivars. Previously they were accessed via hash tables.
        Now, they are accessed using a direct link placed at each atom.
        Direct access is much faster and much simpler to implement and
        therefore less error prone. On the down side, each atom has grown
        3 words.
      * The implementation of contexts was revised and simplified. Now
        each context operation is implemented as a regular built-in predicate.
        This makes the general implementation of CxProlog more uniform, using
        a smaller number of concepts.
      * Some optimizations in the context ops. The speedup is around 20%.
  -bug fixes:
      * Now the predicate 'os_run/1' flushes all the output streams
        before running the command.
      * Bug in predicate name/2, concerning the automatic growing stacks
        feature. This bug went unnoticed since version 0.79. Fixed.
      * Bug in predicate varnames/1, because the variables in the variable
        table were not relocated when the stacks moved. Now these variables are
        relocated.

26/Jul/2002: version 0.83
  -semantic changes:
      * Minor change: arg/3 now simply fails if the first argument
        is out of range. This is the standard behaviour.
      * Using the default boot, all the goals issued at the top level
        are now compiled. They were interpreted before. Therefore, now
        the effects of a top-level goal match accurately the effects
        of the same goal when used as part of a compiled program.
        (As the sole practical effect of this, a top level goal may now
        contain cuts, e.g. "a, !, b, !." Note that CxProlog only
        supports "compiled cuts", that is it does not support "dynamically
        interpreted cuts.)
  -additions:
      * Introduced control meta predicates \+/1, try/1, once/1,
        possible/1, gen/1. There is special support for the cut (!/0)
        occurring inside these predicates.
      * Introduced predicates bagof/3, setof/3 (definitions can be checked
        in 'pl/CxDefs.pl').
      * New predicate subterm/2, checks if a term is part of another.
      * New predicates repeat/1 and repeat/2, succeed on backtracking
        a given number of times.
      * Four new predicates enables CxProlog to communicate though sockets:
        net_install/1, net_uninstall/0, net_accept/2, net_connect/4. (See
        example in pl/net.pl)
  -improvements:
      * Simpler reimplementation of predicate reconsult/1.
      * Now, CxProlog deals better with unit parameters. Now it is possible
        to import from a unit parameter, or to use a unit parameter in a
        context extension goal such as UP>>get(X).
  -bug fixes:
      * Bug in the automatic expansion of the trail stack. This bug was
        introduced along with the "finalizers" in version 0.82. Fixed.
      * findall/3 was not reentrant. Fixed.
      * arg/0 was accepting 0 as first argument. Fixed.

23/Apr/2002: version 0.82
  -semantic changes:
      * None
  -additions:
      * New predicate unique/1, generates unique atoms.
      * New predicates ins/4, ins_start/3, ins_end/3, insert extra
        argument in term.
      * New predicate free_vars/2 gathers all free variables in a term.
      * New flags 'test_relocation' and 'test_garbage_collection'
        allow the activation of a stress-testing mode that forces the
        continuous execution of those critical algorithms that seldom
        run: relocation of the control stacks and the garbage
        collection of atoms.
  -improvements:
      * Now, it is possible to associate a "finalizer function" to any
        non-deterministic predicate written in C. The finalizer is
        automatically activated at the end, when the predicate naturally
        runs out of alternatives OR when the remaining alternatives
        of the predicate are discarded due to the use of the cut (!/0).
        (To setup a finalizer function, you call the C function
        "SetupFinalizer" in the initializing code of your
        non-deterministic predicate written in C).
  -bug fixes:
      * dict_as_list/2 was working on Macintosh/MacOS but not
        on PC/Linux. A machine independent fix was devised.
      * Erroneous /=/2 could instantiate variables as a side-effect.
        Fixed. 
      * The relocation algorithm for the self-expanding control stacks
        was buggy. Fixed, we hope.
      * Now, all error and warning messages are sent to the standard
        output error stream 'user_error'.

07/Feb/2002: version 0.81
  -semantic changes:
      * Now, the possible values for the 'fail_on_error' flag are 0..2:
           0 means OFF;
           1 means ON but the error messages are displayed anyway;
           2 means ON and the error messages are suppressed.
  -additions:
      * New set of predicates allows Unix communicating processes
        to be used:
           process/1, process_new/3, process_send_father/1,
           process_send_father_max/1, process_receive_from_child/2,
           process_receive_from_child_ready/0, current_process/1,
           processes/0.
  -improvements:
      * The code of all "extra types" (dicts, stacks, queues,
        streams and threads) was revised to enhance commonalty.
        All common aspects of this implementation of those types has been
        centralized in the new file "Extra.c". This increases reliability
        and will make it easier to create more "extra types".
      * Now, the imperative dictionaries (dicts) are kept sorted and
        they items are retrieved through binary search.
      * A direct link to the last clause of each predicate was added
        in the predicate descriptors. This way, a quadratic factor that
        was hampering somewhat the efficiency of assertz/1 was removed.
        However, we discovered that this only benefits really large
        predicates, with more than 1000 clauses. The following table
        shows the time taken to assertz the clauses a(1) ... a(N)
        on a Mac Classic:
                N   PREVIOUSLY  NEW VERSION
              100     0.30 sec     0.28 sec
             1000     3.63 sec     2.82 sec
             2000     8.93 sec     5.60 sec
             3000    15.90 sec     8.45 sec
             5000    34.80 sec    14.05 sec
            10000   110.80 sec    28.30 sec
  -bug fixes:
      * The term reader was not handling properly the atoms '[]'
        and '{}'. For example, legit terms such as [](1) or {}(1) was
        incorrectly taken as syntax errors. Problem fixed.
      * The predicate 'abolish_builtin/2' has broken in version 0.80.
        Fixed.

21/Dec/2001: version 0.80
  -semantic changes: 
      * The new debugger forced some minor changes in the boot file:
         - $cxprolog_startup/0 was renamed $cxprolog_initialise/0
           (no real change here)
         - $cxprolog_restart/0 was discontinued and replaced by the
           new predicate $cxprolog_top_level_goal/0. The difference is
           that the new predicate performs the top-level user-iteration
           concerning a SINGLE GOAL and not concerning a sequence of goals.
           (Therefore, the new predicate is reactivated more often.)
        Both predicates may fail or succeed after doing their job: it doesn't
        matter. [Sample boot file in pl/CxBoot.pl].
      * Now, the predicate concat/2 (===/2) can be applied to a
        list of general Prolog terms.
      * When the 'fail_on_error' flag in ON, the runtime errors
        generate "failure" instead of "restart", as before. But now
        the error messages are simply discarded. They are not anymore
        stored in the queue "errors", which is discontinued.
      * Discontinued all the "unix_" prefixed predicates and replaced
        them with a revised set of "os_" prefixed predicates.
      * Discontinued the flags "debugging" and "trace" and replaced them
        with the better flags "debug" and "interrupt".
      * Discontinued the predicate top_call/1. In its place, you use the
        standard predicate call/1.
  -additions:
      * The file "YourExtensions.c" now includes several cautionary
        warnings at the beginning.
      * New reasonably featured debugger, based on the traditional
        "procedure box" control flow model. The README file includes
        a section explaining the CxProlog debugger and its predicates.
        These are the supported debugger predicates:
          debug/0, trace/0, nodebug/o, notrace/0, debugging/0,
          leash/1, spy/1, nospy/1, nospyall/2.
        These are the available debug options:
          <ret> creep            l leap             h help
           s<i> skip             + spy this         i info
           q<i> quasi-skip       - nospy this    g<n> ancestors
           r<i> retry            n nodebug          = debugging
           f<i> fail             a abort            : statistics
                                 e exit
      * New set of file system predicates allow the hierarchic
        file system to be examined and manipulated. As now, some of
        these predicates are only available under Unix and
        Classic MacOS. The hierarchic file system predicates are:
           fs_exists/1, fs_rename/2, fs_delete/1, file_exists/1,
           rename_file/2, delete_file/1, exists/1, rename/2,
           fs_property/3, fs_cd/1, fs_cd/2, fs_home/0, fs_files/1.
      * New set of predicates provides access to selected operating
        system services:
           os_name/1, os_run/1, system/1, sh/0, os_env/2,
           os_arg/2, os_args/1.
      * New database command, mutable_builtin/2, allows user-defined
        built-in predicates to be declared as mutable in the boot file.
        By default, built-ins are immutable.
      * New flag "debug" controls the current debugger working mode.
      * New flag "interrupt" controls the effects of the CTRL-C interrupt.
  -improvements: 
      * Developed an iterative algorithm for predicate is/2, so that
        is/2 could deal properly with very large terms, such as
        1+1+...+1  [100000 times, for example]. The previous algorithm
        was recursive and couldn't deal with large terms because of the
        C language runtime stack is limited in size. 
  -bug fixes:
      * The predicate univ, =../2, was not reliable enough. Now, all the
        required checks are made. For example, previously, the nonsensical
        call X =.. Y makes =../2 entering an infinite loop; now, the same
        makes generates an error.
      * CxProlog was crashing, completely out of control, if the boot file
        does not follows the rules. Now, diagnosis messages are issued
        in this situation.

30/May/2001: version 0.79
  -semantic changes: 
      * Reversed the order of parameters in ===/2 to make it resemble
        an assignment operator.
      * Discontinued the confusing convention, introduced in
        version 0.56, concerning the automatic translation of '|' to ';'.
        Now, there is a new flag, 'bar_is_semicolon', which cleanly
        controls whether the automatic translation of '|' to ';'
        is ON or OFF.
  -additions:
      * New predicates read_tokens/1 and read_tokens/2 read entire
        line as list of tokens.
      * New predicate top_call/1 specializes in activating goals in
        the top level iteration.
      * New flag 'compatible_strings' controls the interpretation of
        double-quoted literals (strings).
      * New flag 'bar_is_semicolon' controls whether '|' is, or is not,
        automatically translated to ';'.
      * New flag 'garbage_collection' controls whether the garbage
        collector of atoms is active or not.
  -improvements: 
      * A new rationale for the management of the global stack is
        introduced. Finally, the global stack becomes a fully fledged
        growing structure. Previously, the global stack couldn't
        grow in the context of any term-creating predicate.
        All the following predicated had to rewritten in order to
        comply to the new rationale: read/1, read/2, copy_term/2,
        copy_term/3, sort/2, msort/2, keysort/2, name/2,
        dict_get/3, dict_as_list/1,  =:/2, current_ivar/1,
        clause/2, retract/1, queue_get/2, queue_peek/2,
        queue_as_list/2, stack_pop/2, stack_top/2, stack_as_list/2.
      * We did away with the existing intern limit of 64
        distinct variables per term (except on asserted clauses).
      * As now, many CxProlog internal routines are implemented as
        recursive functions. This is a bit dangerous because the C
        language may fail to provide a large enough runtime stack,
        when dealing with very large terms. Therefore we started
        developing iterative versions of the more critical
        algorithms used inside CxProlog. These are the iterative
        algorithms already developed: "CopyTerm", "Unify", "Compare".
  -bug fixes:
      * atom_term/2 and atom_termq/2 were not dealing properly with
        atoms '', ' ', '  ', '   ', etc.
      * The cut predicate (!/0) was not working in the context 
        of predicates ;/2, not/1, call/1, etc. [This bug was introduced
        in version 0.76 and remained unnoticed until now.]
      * The generation of indexes for predicates with many
        clauses was making CxProlog crash. This was a problem in
        the management of the auto-expanding buffer. [As a matter of
        fact, we had disregarded testing for extreme conditions during
        the creation of indexes. Bug introduced in version 0.76.]

27/Mar/2001: version 0.78
  -semantic changes: 
      * The interpretation of the sublists in predicate concat/2 (===/2)
        has changed.
      * The 'show_text' and 'smart_atoms' flags are discontinued.
      * The 'super_indexes' flag is replaced by the more flexible
        flag 'index_params'.
  -additions:
      * New flag 'float_display_precision' controls how floats are
        displayed.
      * New predicate atoms/0 presents information concerning the
        internal hash table of atoms.
      * New predicate floats/0 presents information concerning the
        new internal hash table of very large precision floats.
      * New float constant 'inf' represents "infinite" (inf = 1/0).
      * New integer constants 'int_size' and 'float_size' tell the
        bit-length of the integers and floats in your installation of
        CxProlog.
  -improvements: 
      * A garbage collector of atoms is introduced. "Texts", the
        previous special representation of transient text are
        discarded. Replacing "texts" by garbage collected atoms
        makes CxProlog easier to maintain and more reliable.
  -bug fixes:
      * By mistake, some trans-127 characters could not be recognized
        as belonging to any valid lexical character category. This was
        an issue with predicates atom_term/2, atom_termq/2, writeq/1
        and  writeq/2. Fixed the problem.
      * Due to "integer overflow", reading a very long integer used
        to generating a meaningless value. Now, such long integers
        are automatically converted to float numbers. Example:
            ?- X is 11111111111111111111111111111111111111111111111.
            X=1.11111111111111111e+46
            yes
      * Due to "integer overflow", when applied to large integer
        numbers, the operators +/2, -/2, -/1, */2 could generate
        meaningless results. Now the operands of these operators are
        always converted to float numbers, meaning the problem has been
        fixed. Conclusion: predicates is/1, =:=/2, =\=/2, </2, >/2, =</2,
        >=/2 can now be used with peace of mind as each and every form
        of integer overflow has been ruled out from CxProlog.
      * We backtracked on the decision of introducing higher precision
        integers. Instead, we introduce large precision floats. Now, we
        use the largest precision floats supported by the host machine.
        This amounts to 80-bit precision floats in most machines (check
        the value of the new constant 'float_size' in your installation).
        As for integers, currently CxProlog supports 29-bit integers on
        32-bit machines and 61-bit integers on 64-bit machines (check
        the value of the new constant 'int_size' in your installation).

03/Mar/2001: version 0.77
  -semantic changes: 
      * The environment variable 'CXPROLOG_SIZE' has been discontinued.
      * The command line argument '-size' has been discontinued.
  -additions:
      * None.
  -improvements: 
      * Tighter detection of local stack and global stack overflows.
      * The trail stack becomes an growing (or "elastic") structure.
      * The local stack becomes an growing structure.
        (Growing the local stack involves a complex relocation
        algorithm, but it has been very thoroughly tested.)
      * The global stack becomes a growing structure, but, in this case,
        only PARTIALLY: as yet, certain operations (such as
        reading an extremely large term via read/1) may still generate
        the "Global stack overflow" error. Improving from here requires
        reconsidering  and rewriting large portions of code. This will
        be done  at a  later time.
        [Due to the "elastic" stacks, the INITIAL memory requirements of
        CxProlog dramatically reduced from 1.000Kb to 200Kb!]
      * Introduce higher precision integers in the context of
        32-bit machines. Previously, CxProlog only supported 29-bit
        integers (8-digit precision) on 32-bit machines.
        This gain of precision depends on the subjacent C compiler:
        using most compilers, it amounts to merely a single digit;
        using GCC, it amounts to 10 digits. Check out the values
        of 'max_int' and 'min_int' in your version of CxProlog.
        [Implementation detail: Integers not fitting in the
        original 29-bit limit are stored in a table of large integers.]
  -bug fixes:
      * Dubious implementation of the GetXValue instruction revised.
        Theoretically, due to side-effects, some C compilers might
        generate the "wrong code" for this instruction.

24/Jan/2001: version 0.76
  -semantic changes: 
      * Predicates readv/2 and readv/3 are replaced by the more
        flexible new predicate varnames/1.
      * Predicate debugging_call/1 is deleted and replaced by the
        more convenient flag 'debugging'.
  -additions:
      * Introduced support to '?-T' questions in the consult/reconsult
        predicates.
      * Revised the support to ':-T' commands in the consult/reconsult
        predicates.
      * Introduced support to ':-T' commands in the top level iteration.
      * New predicate question/2 handles '?-T' questions at the top level
        iteration and consult/reconsult predicates.
      * New predicate varnames/1 gathers the names of all the variables
        in the term last read using read/1 or read/2.
      * New flag 'debugging' allows debugging to be enabled/disabled. The
        effects of the CNTL-C interrupt, now depend on the status of this
        flag.
  -improvements: 
      * None.
  -bug fixes:
      * Problems with the handling of the CNTL-C interrupt fixed.

15/Jan/2001: version 0.75
  -semantic changes: 
      * Old predicate read/2 is renamed readv/2. Now read/2
        denotes a new stream predicate.
      * The method for changing and testing the internal flags of
        CxProlog has changed. The new method is based on the new
        predicates flag/2, flag/3.
      * The 'silent' flag is discontinued.
      * The predicate undef/0 is renamed check_missing/0.
  -additions:
      * Now, the user is allowed to specify a boot file of his own. More
        on this on the "ALTERNATIVE BOOT FILE" section near the end of
        this document.
      * "Flexible streams" introduced. There is a new set of "stream
        predicates" which require an explicit stream argument:
           open/3, close/1, stream/1, set_input/1, current_input/1,
           read/2, readv/3, get0/2, get/2, peek0/2, peek/2, skip/2,
           get_line/2, set_output/1, current_output/1, flush/1, write/2,
           writeln/2, writeq/2, writeqln/2, print/2, put/2, nl/1, tab/2,
           streams/0.
      * Handy new set of predicates for spying selected aspects of the
        CxProlog internal state:
           show/0, builtins/0, flags/0, ops/0, stacks/0, streams/0,
           version/0, dicts/0, ivars/0, queues/0, statistics/0, units/0
      * A bunch of new ivar predicates:
           ivar/1, ?:=/2, #:=/2, ivar_delete/1, current_ivar/2.
      * Three new minor control predicates:
           false/0, exit/0, debugging_call/1.
      * Several new queue/stack/dict predicates:
           queue_as_list/2, stack_as_list/2, dict_as_list/2,
           queue_write/2, stack_write/2, dict_write/2.
      * Six new term predicates:
           numbervars/3, write_depth/2, copy_term/2, copy_term/3,
           add_pl/2, app/3.
      * Predicate atom_term/2, one that deals with reversible conversions,
        is renamed atom_termq/2. A new non-reversible version of this
        predicate is introduced and named atom_term/2 (that is, the old
        predicate name was recycled).
      * Two new minor thread predicates:
        active_thread_completed/0, active_thread_failed/0.
      * New predicates silent_consult/1 and silent_reconsult/1 are
        similar to consult/1 and reconsult/1 but produce no output
        on their own.
      * New flag 'compatible_if_then' establishes the exact semantics of
        predicate ->/2.
      * New database command abolish_builtin/2 allows predefined
        built-in predicates to be redefined in an alternative boot file.
      * New predicate check_imports/0 produces warnings concerning
        possible inconsistency in the import/visibility declarations
        graph.        
  -improvements: 
      * This file, "_README", was completely rewritten.
  -bug fixes:
      * Fixed bug on replacing a "text" by another term in an imperative
        var.
      * Fixed bug on reading an erroneous terms appearing at the ending of a
        file.

03/Dec/2000: version 0.74
  -semantic changes: 
      * None.
  -additions: 
      * New predicate unix_arg/2 allows access to individual command
        line arguments.
      * New predicate unix_args/1 gets entire command line as a
        list of atoms.
      * Predicate slice/4 is generalized. Now, it allows negative
        integer arguments, representing offsets relative to the ENDING of
        the input atom.
      * Two new ivar predicates: ivar/1, ivar_delete/1.
      * Imperative stacks introduced. The stack predicates are:
           stack/1, stack_new/1, stack_clear/1, stack_delete/1,
           stack_push/2, stack_pop/2, stack_top/2, stack_write/1,
           current_stack/1
  -improvements: 
      * None.
  -bug fixes:
      * None.

11/Out/2000: version 0.73
  -semantic changes: 
      * Slight change of the behaviour induced by the "fail_on_error"
        flag: now, when this flag is 'on', the error messages are
        silently appended to a queue placed in the new predefined
        ivar "errors". The previous ivar "last_error" is discontinued.
  -additions: 
      * The standard order over the terms is introduced. The related
        predicates are: @<, @>, @=<, @>=, sort/2, msort/2, keysort/2
      * Introduced super-indexes, based on the three first parameters of
        each predicate, instead of only the first.
      * Imperative queues introduced. The queue predicates are:
           queue/1, queue_new/1, queue_clear/1, queue_delete/1,
           queue_put/2, queue_get/2, queue_peek/2, queue_write/1,
           current_queue/1
      * Imperative dictionaries introduced. The dict predicates are:
           dict/1, dict_new/1, dict_clear/1, dict_delete/1, dict_set/3,
           dict_get/3, dict_delete_item/2, dict_write/1, current_dict/1
      * Introduced lots of internal flags. As yet, the supported flags
        are: trace, fail_on_error, smart_atoms, silent, keep_source,
           undef_warnings, memory_warnings, show_text, super_indexes.
  -improvements: 
      * Ongoing work on "elastic internal structures": in other words,
        the "growing" feature of the "code area space" is being
        extended to all the other internal buffers. 
      * This file, "_README", expanded. Tried to be exhaustive.
  -bug fixes: 
      * Fixed a nasty bug that showed up whenever a "text" was stored in
        an imperative var.

31/Aug/2000: version 0.72
  -semantic changes: 
      * "Smart atoms" are introduced. "Texts" are discarded. NOW, THE
        PROGRAMMER ONLY DEALS WITH ATOMS, as it is the implementation that
        decides on the best internal representation for each atom
        depending on its usage (classic representation or text
        representation). The "back-quotes" notation is
        discontinued. [Turning 'on' the 'show_text' flag makes write/1
        display in a special way (using a prefixing "@") the atoms that
        are internally represented as "texts".]
      * Removed all "text" predicates and some "string" predicates. They
        are not needed anymore since the introduction of the "smart
        atoms". The removed predicates are:
           text/1, gett/1, slicet/4, namet/2, concatt/2,
           gets/1, puts/1, concats/2.
      * Ivars are not explicitly declared anymore. They are automatically
        created when assigned for the first time. Therefore, the
        predicate create_ivar/1 is discontinued.
  -additions: 
      * Added replacement predicates for smart atoms (as the "text"
        predicates have been deleted):
           get_line/1, slice/4, concat/2, ===/2.
      * New predicate atom_term/2 converts between a term and its textual
        representation.
      * Turning 'on' the 'fail_on_error' flag, changes the internal
        behaviour of CxProlog so that a runtime error generates
        "failure" instead of "restart". In this case, each error message
        is silently stored in the ivar "last_error".
      * New predicates unix_env/2 and unix_run/2.
      * New predicate host_speed/1.    
  -improvements: 
      * Lots of small internal improvements. 
  -bug fixes:
      * None.
 
27/Jul/2000: version 0.71
  -semantic changes: 
      * Predicates get_ivar/2 and set_ivar/2 are renamed using the
        operators:
           :=/2 and =:/2.
      * Using a functor with too large an arity is certainly the result
        of some logic mistake. Therefore a maximum arity for functors
        is introduced: maxArity = 64.
  -additions: 
      * "Historic contexts" are introduced in the language.
      * New predicate quote/1 quotes text.
      * New predicate file_exists/1 checks if a file can be opened
        for reading.
      * Predicates see/1, tell/1, consult/1, reconsult/1, etc., now
        accept either atoms OR texts.
      * Introduced  the command line switches "-boot" and "-size".
      * Introduced support for the shell variables CXPROLOG_BOOT and
        CXPROLOG_SIZE.
  -improvements: 
      * Now the prompt is written on the C side of the system, and
        not anymore on the Prolog side. This is required by the "readline
        interface".
      * File "YourExtentions.c" and functions "YourPrologue" and
        "YourExtensions" introduced.  The implementation was
        reorganized so that all C extensions to CxProlog would
        bottleneck through functions "YourPrologue" and "YourExtensions",
        defined in file "YourExtentions.c".
      * Much simpler method for introducing non-deterministic built-in
        predicates, so that extending the system will be easier.
      * Now the code area space of CxProlog grows automatically, as
        needed.
  -bug fixes: 
      * Two bugs in write/1 fixed.
      * Bug in functions "ceil" and "floor" fixed.
      * Bug in the internal codification of floats fixed.

10/Apr/2000: version 0.70
  -semantic changes: 
      * None.
  -additions: 
      * Added support for units (modules). Units may be parameterized.
      * Added support for the contextual logic programming paradigm.
      * Added support for imperative variables. The ivar predicates are:
           create_ivar/1, get_ivar/2, set_ivar/2.
      * The sublanguage of the arithmetic expressions was enlarged.
      * Now, the Control-C interrupt is handled
  -improvements: 
      * Complete internal system overhaul.
      * The error messages are now much improved.
      * Improved the display of query results.
      * New internal method for binding the predicates to their code.
      * New improved technique for dealing with clause chains: two
        parallel chains are not used anymore.
      * New improved techniques for dealing with indexes: on the
        invalidation of the index when a predicate changes, on the
        relocation of the index code, etc.
      * read/1 can now deal with V E R Y  L A R G E terms.
      * The internal representation of floats in the host machine is now
        automatically recognized.
  -bug fixes: 
      * Bug in predicate clause/2 fixed. Now this predicate fails
        if applied to a built-in predicate.
      * Bug related to the use of trans-127 characters fixed.
  -special changes:
      * "NanoProlog" was renamed "CxProlog" due to the introduction for
        the contextual logic programming paradigm.
        
24/Mar/2000: version 0.57
  -semantic changes: 
      * Removed predicate gets/2.
      * '`' changed from _SY to '`' (Now '`' is used as delimiter for
        the "text" literals).
  -additions: 
      * Added general support for the future introduction of new
        primitive types:
          - new tag: "extra"
          - new instructions: the "Extra" instruction family
          - new predicate: extra/1
      * Added new primitive type "text" and associated predicates:
          text/1, gett/1, slicet/4, namet/2, concatt/2.
  -improvements: 
      * The whole program was made ANSI-conformant.
  -bug fixes: 
      * None.

27/Jun/1999: version 0.56
  -semantic changes: 
      * ';', '#' and other trans-127 chars changes from _SO to _SY.
      * In contexts where '|' did not indicate "the reminder of a list"
        this char used to be translated to ";". Now, the user can
        change this default by forcing '|' to be interpreted as a
        regular binary operator. This is done by defining '|' as a
        regular operator. Use, for example, the command
           :- op(1140, xfx, '|').
      * Removed predicates noindex/1 and noindex/2. (NanoProlog got
        clever and does not need anymore to bother the user with
        indexing issues.)
  -additions: 
      * New I/O predicates: peek0/1, peek/1, puts/1, gets/1, gets/2
      * New string predicate: concats/2
  -improvements:
      * Some small internal improvements
  -bug fixes: 
      * "nonvar/1" bug fixed.
      * [user] (consult(user)) bug fixed.
  
05/Aug/1997: version 0.55
  -semantic changes: 
      * None.
  -additions: 
      * Introduce support for the Latin-1 character set.
      * Now, the name of the boot file can be obtained from an optional
        command line argument or from the unix environment variable
        "NANO". Only as last resource an internally predefined name is
        used. This name is "CxBoot.pl".
      * Now, the predicates consult/1 and reconsult/1 append the
        suffix '.pl' to the filename, if so necessary.
  -improvements: 
      * None.
  -bug fixes: 
      * None.
  
08/Apr/1997: version 0.54
  -semantic changes: 
      * Added proper support for the cut predicate (!/0) when used
        inside the built-in predicates: ,/2, ;/2, not/1, call/1, ->/2
        (new virtual machine instruction: PutCutLevel)
  -additions: 
      * New built-in predicate undef/0: it lists all the undefined
        predicates invoked in the existing clauses.
  -improvements: 
      * None.
  -bug fixes: 
      * None.

24/Set/1996: version 0.53
  -bug fixes: 
      * Harmless bug fixed

25/Feb/1994: version 0.52
  -improvements: 
      * 64 bit machine compatibility plus some polishing.
      * Tested on some more machines: Alpha, Sparc, 88000, R6000, HP
  -bug fixes: 
      * Bug in reconsult/1 fixed.
 
20/Nov/1993: version 0.51
  -improvements: 
      * Threaded code added
  -bug fixes: 
      * Small bugs fixed

17/Nov/1993: version 0.5

...

20/Mar/1990: version 0.1
