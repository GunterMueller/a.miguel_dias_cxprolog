/*
 *   This file is part of the CxProlog system

 *   Memory.c
 *   by A.Miguel Dias - 1989/11/14
 *   CITI - Centro de Informatica e Tecnologias da Informacao
 *   Dept. de Informatica, FCT, Universidade Nova de Lisboa.
 *   Copyright (C) 1990-2006 A.Miguel Dias, CITI, DI/FCT/UNL

 *   CxProlog is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.

 *   CxProlog is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU General Public License for more details.

 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

/*
 * THE ELASTIC STRUCTURES:
 *   Code Area (file Memory.c),
 *   ScratchPad (file Scratch.c),
 *   Global/Local stacks (file Machine.c),
 *   Trail/Finalizers stacks (file Machine.c)
 */

#include "CxProlog.h"
#if __APPLE__
#include <malloc/malloc.h>
#else
#include <malloc.h>
#endif

#if M_MMAP_THRESHOLD /* checks if mmap supported */
#include <sys/mman.h>
#endif


/* Allocate Memory Segments */

VoidPt AllocateSegment(Size nWords, VoidPt end)
{		/* Requests block of memory to the OS */
#if M_MMAP_THRESHOLD
	CharPt mem = mmap(nil, WordsAsBytes(nWords), PROT_READ|PROT_WRITE,
										MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) ;
	if( mem == MAP_FAILED )
#else
	CharPt mem = malloc(WordsAsBytes(nWords)) ;
	if( mem == nil )
#endif
		Error("No more computer memory available") ; 
	*cHdl(end) = cPt(mem) + nWords ;
	return mem ;
}

void ReleaseSegment(VoidPt mem, Size nWords)
{
#ifdef M_MMAP_THRESHOLD
	if( munmap(mem, nWords) == -1 )
		FatalError("Malfunction: could not free memory") ;
#else
	free(mem) ;
#endif
}

Bool UsingMMap()
{
#if M_MMAP_THRESHOLD
	return true ;
#else
	return false ;
#endif
}


/* Memory Blocks */

typedef struct Block {
	Size size ;
	struct Block *next ;
} Block, *BlockPt ;

#define cBlockPt(b)				((BlockPt)(b))

#define BlockSize(b)			( cBlockPt(b)->size )
#define BlockNext(b)			( cBlockPt(b)->next )
#define BlockExternalize(b)		cBlockPt(cPt(b) + 1)
#define BlockInternalize(b)		cBlockPt(cPt(b) - 1)
#define BlockEnd(b)				cBlockPt(cPt(b) + BlockSize(b))

#define minBlockSize			4


/* More Memory */

#define initialSegmentCapacity	32 K /* words */
#define maxSegmentCapacity		128 K /* words */

static Size codeAreaSize = 0 ;
static Pt memA = nil, memZ = nil ;

static void ReleaseBlockWithSizeStored(VoidPt mem) ;

static void MoreMemory(Size atLeastWords)
{
	Size words ;
	atLeastWords += 3 ; /* may be need in the alignment at the end of the fun */
	for( words = Min(Max(codeAreaSize, initialSegmentCapacity), maxSegmentCapacity)
							; words < atLeastWords ; words *= 2 ) ;
	if( codeAreaSize > 0 )  /* first grow not shown */
		MemoryGrowWarning("program space", codeAreaSize,
										codeAreaSize + words, nil) ;
	if( memZ - memA >= minBlockSize ) {
		BlockPt q = cBlockPt(memA) ;
		BlockSize(q) = memZ - memA ;
		if( odd(BlockSize(q)) ) BlockSize(q)-- ; /* required */
		ReleaseBlockWithSizeStored(BlockExternalize(q)) ;
	}
	memA = AllocateSegment(words, &memZ) ;
	codeAreaSize += words ;
Mesg("%lx  %lx", memA, memZ) ;
	while( (cWord(memA) & memAlignMask) != 0 ) memA++ ;
	while( (cWord(memZ) & memAlignMask) != 0 ) memZ-- ;
Mesg("%lx  %lx", memA, memZ) ;
}


/* Allocate Memory Blocks */

#define blockSlack				2

static BlockPt freeList = nil ;

VoidPt Allocate(Size nWords, Bool saveSize)
{
	register BlockPt *p, q ;
/* ensures an even number of words */
	if( odd(nWords) ) nWords++ ;
/* search freeList for a block with the exact size */
	for( p = &freeList ; ; p = &BlockNext(*p) ) {
		if( *p == nil ) { /* no suitable block was found */
			if( memZ - memA < nWords )
				MoreMemory(nWords) ;
			q = cBlockPt(memA) ;
			memA += nWords ;
		}
		elif( BlockSize(*p) >= nWords ) {
			if( BlockSize(*p) == nWords ) { /* found block with the exact size found */
				q = *p ;
				*p = BlockNext(*p) ;
			}
			else {			/* too big a block: extract segment at the end */
				BlockSize(*p) -= nWords ;
				q = BlockEnd(*p) ;
			}
		}
		else continue ;
		return q ;
	}
}




static VoidPt AllocateBlockWithNoSizeStored(Size nWords)
{
	register BlockPt *p, q ;
/* ensures an even number of words */
	if( odd(nWords) ) nWords++ ;
/* search freeList for a block with the exact size */
	for( p = &freeList ; ; p = &BlockNext(*p) ) {
		if( *p == nil ) { /* no suitable block was found */
			if( memZ - memA < nWords )
				MoreMemory(nWords) ;
			q = cBlockPt(memA) ;
			memA += nWords ;
		}
		elif( BlockSize(*p) >= nWords ) {
			if( BlockSize(*p) == nWords ) { /* found block with the exact size found */
				q = *p ;
				*p = BlockNext(*p) ;
			}
			else {			/* too big a block: extract segment at the end */
				BlockSize(*p) -= nWords ;
				q = BlockEnd(*p) ;
			}
		}
		else continue ;
		return q ;
	}
}

static void ReleaseBlockWithNoSizeStored(VoidPt mem, Size nWords)
{
/* ensures an even number of words */
	if( odd(nWords) ) nWords++ ;
/* link in freeListZ */		
	BlockSize(mem) = nWords ;
	BlockNext(mem) = freeListZ ;
	freeListZ = mem ;
}

static VoidPt AllocateBlockWithSizeStored(Size nWords)
{
	register BlockPt *p, q ;
/* ensures an even number of words after adding extra word for storing size */
	if( even(nWords) ) nWords += 2 ; else nWords++ ;
/* search freeList for a large enough block */
	for( p = &freeList ; ; p = &BlockNext(*p) ) {
		if( *p == nil ) { /* no suitable block was found */
			if( memZ - memA < nWords )
				MoreMemory(nWords) ;
			q = cBlockPt(memA) ;
			BlockSize(q) = nWords ;
			memA += nWords ;
			return BlockExternalize(q) ;
		}
		if( BlockSize(*p) >= nWords ) {
			if( BlockSize(*p) - nWords <= blockSlack ) {/* size is good enough */
				q = *p ;
				*p = BlockNext(*p) ;
			}
			else {			/* too big a block: extract segment at the end */
				BlockSize(*p) -= nWords ;
				q = BlockEnd(*p) ;
				BlockSize(q) = nWords ;
			}
			return BlockExternalize(q) ;
		}	
	}
}

static void ReleaseBlockWithSizeStored(VoidPt mem)
{
	register BlockPt p, n, f = BlockInternalize(mem) ;
/* is freeList empty? */
	if( freeList == nil ) {
		BlockNext(f) = nil ;
		freeList = f ;
		return ;
	}	
/* will f the the first block in freeList? */
	if( f < freeList ) {
		if( BlockEnd(f) == freeList ) {
			BlockSize(f) += BlockSize(freeList) ;
			BlockNext(f) = BlockNext(freeList) ;
		}
		else BlockNext(f) = freeList ;
		freeList = f ;
		return ;
	}
/* search */
	for( p = freeList ; (n = BlockNext(p)) != nil && n < f ; p = n ) ;
/* join to lower block */
	if( BlockEnd(p) == f ) {
		BlockSize(p) += BlockSize(f) ;
		f = p ;
	}
	else BlockNext(p) = f ;
/* join to upper block */
	if( BlockEnd(f) == n ) {
		BlockSize(f) += BlockSize(n) ;
		BlockNext(f) = BlockNext(n) ;
	}
	else BlockNext(f) = n ;
}

#if 1
static VoidPt CheckAlign(VoidPt p)
{
	if( cWord(p) & 0x7 )
		FatalError("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ") ;
	return p ;
}
#define check(x)		CheckAlign(x)
#else
#define check(x)		(x)
#endif

VoidPt Allocate(Size nWords, Bool saveSize)
{
#if 0
	if( nWords > 50 ) Mesg("%ld %d", nWords, saveSize) ;
#endif
	if( saveSize )
		return AllocateBlockWithSizeStored(nWords) ;	
	else
		return check(AllocateBlockWithNoSizeStored(nWords)) ;
}

void Release(VoidPt mem, Size nWords)
{
	if( nWords == -1 )
		ReleaseBlockWithSizeStored(mem) ;
	else
		ReleaseBlockWithNoSizeStored(mem, nWords) ;
}

VoidPt Reallocate(VoidPt mem, Size oldSize, Size newSize)
{
	VoidPt newMem ;
	if( oldSize == -1 ) {
		BlockPt p = BlockInternalize(mem) ;
		if( BlockSize(p) >= newSize ) InternalError("Reallocate") ;
		newMem = Allocate(newSize, true) ;
		CopyWords(newMem, mem, BlockSize(p)) ;
	}
	else {
		if( oldSize >= newSize ) InternalError("Reallocate") ;
		newMem = Allocate(newSize, false) ;
		CopyWords(newMem, mem, oldSize) ;
	}
	Release(mem, oldSize) ;
	return newMem ;
}

Size MemBlockSize(VoidPt mem)
{
	return	BlockSize(BlockInternalize(mem)) - 1 ;
}

Size CodeAreaSize()
{
	return codeAreaSize ;
}

Size CodeAreaUsed()
{
	register BlockPt p ;
	register Size size ;	
	size = codeAreaSize ;
	doseq(p, freeList, BlockNext(p))
		size -= BlockSize(p) ;
	doseq(p, freeListZ, BlockNext(p))
		size -= BlockSize(p) ;
	size -= memZ - memA ;
	return size ;
}
